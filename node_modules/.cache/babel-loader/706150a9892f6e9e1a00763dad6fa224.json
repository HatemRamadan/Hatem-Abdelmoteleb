{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ky_universal_1 = __importDefault(require(\"ky-universal\"));\nconst is_ip_1 = __importDefault(require(\"is-ip\"));\n/**\r\nGet ip location information.\r\n@param ip The ipv4 address to get the information for.\r\n@example\r\n```\r\nconst ipLocation = require(\"ip-location\");\r\n\r\n(async () => {\r\n    await ipLocation(\"172.217.167.78\");\r\n    //=> { latitude: -33.8591, longitude: 151.2002, region: { name: \"New South Wales\" ... } ... }\r\n})();\r\n```\r\n*/\nasync function ipLocation(ip) {\n  if (typeof ip !== \"string\" || !is_ip_1.default.v4(ip)) {\n    throw new TypeError(\"A valid ipv4 address must be provided!\");\n  }\n  const {\n    latitude,\n    longitude,\n    city,\n    reserved,\n    region,\n    region_code,\n    country_name,\n    country_code,\n    country_code_iso3,\n    country_capital,\n    country_tld,\n    country_population,\n    country_calling_code,\n    continent_code,\n    in_eu,\n    postal,\n    timezone,\n    utc_offset,\n    currency,\n    currency_name,\n    languages,\n    country_area\n  } = await ky_universal_1.default(`https://ipapi.co/${ip}/json/`).json();\n  return reserved ? {\n    reserved\n  } : {\n    latitude,\n    longitude,\n    city,\n    reserved: Boolean(reserved),\n    region: {\n      name: region,\n      code: region_code\n    },\n    country: {\n      name: country_name,\n      code: country_code,\n      iso3: country_code_iso3,\n      capital: country_capital,\n      tld: country_tld,\n      population: country_population,\n      area: country_area,\n      callingCode: country_calling_code,\n      postalCode: postal,\n      timezone: {\n        code: timezone,\n        offset: utc_offset\n      },\n      currency: {\n        name: currency_name,\n        code: currency\n      },\n      languages: languages ? languages.split(\",\") : []\n    },\n    continent: {\n      code: continent_code,\n      inEu: in_eu\n    }\n  };\n}\nexports.default = ipLocation;\nmodule.exports = ipLocation;\nmodule.exports.default = ipLocation; // eslint-disable-line @typescript-eslint/no-unsafe-member-access","map":{"version":3,"names":["ky_universal_1","__importDefault","require","is_ip_1","ipLocation","ip","default","v4","TypeError","latitude","longitude","city","reserved","region","region_code","country_name","country_code","country_code_iso3","country_capital","country_tld","country_population","country_calling_code","continent_code","in_eu","postal","timezone","utc_offset","currency","currency_name","languages","country_area","json","Boolean","name","code","country","iso3","capital","tld","population","area","callingCode","postalCode","offset","split","continent","inEu","exports","module"],"sources":["../source/index.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;AAAA,MAAAA,cAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,OAAA,GAAAF,eAAA,CAAAC,OAAA;AAuEA;;;;;;;;;;;;;AAaA,eAAeE,UAAUA,CAACC,EAAU;EACnC,IAAI,OAAOA,EAAE,KAAK,QAAQ,IAAI,CAACF,OAAA,CAAAG,OAAI,CAACC,EAAE,CAACF,EAAE,CAAC,EAAE;IAC3C,MAAM,IAAIG,SAAS,CAAC,wCAAwC,CAAC;;EAG9D,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,MAAM;IAAEC,WAAW;IAAEC,YAAY;IAAEC,YAAY;IAAEC,iBAAiB;IAAEC,eAAe;IAAEC,WAAW;IAAEC,kBAAkB;IAAEC,oBAAoB;IAAEC,cAAc;IAAEC,KAAK;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,UAAU;IAAEC,QAAQ;IAAEC,aAAa;IAAEC,SAAS;IAAEC;EAAY,CAAE,GAAc,MAAM9B,cAAA,CAAAM,OAAE,CAAC,oBAAoBD,EAAE,QAAQ,CAAC,CAAC0B,IAAI,EAAE;EAE7V,OAAOnB,QAAQ,GAAG;IACjBA;GACA,GAAG;IACHH,QAAQ;IACRC,SAAS;IACTC,IAAI;IACJC,QAAQ,EAAEoB,OAAO,CAACpB,QAAQ,CAAC;IAC3BC,MAAM,EAAE;MACPoB,IAAI,EAAEpB,MAAM;MACZqB,IAAI,EAAEpB;KACN;IACDqB,OAAO,EAAE;MACRF,IAAI,EAAElB,YAAY;MAClBmB,IAAI,EAAElB,YAAY;MAClBoB,IAAI,EAAEnB,iBAAiB;MACvBoB,OAAO,EAAEnB,eAAe;MACxBoB,GAAG,EAAEnB,WAAW;MAChBoB,UAAU,EAAEnB,kBAAkB;MAC9BoB,IAAI,EAAEV,YAAY;MAClBW,WAAW,EAAEpB,oBAAoB;MACjCqB,UAAU,EAAElB,MAAM;MAClBC,QAAQ,EAAE;QACTS,IAAI,EAAET,QAAQ;QACdkB,MAAM,EAAEjB;OACR;MACDC,QAAQ,EAAE;QACTM,IAAI,EAAEL,aAAa;QACnBM,IAAI,EAAEP;OACN;MACDE,SAAS,EAAEA,SAAS,GAAGA,SAAS,CAACe,KAAK,CAAC,GAAG,CAAC,GAAG;KAC9C;IACDC,SAAS,EAAE;MACVX,IAAI,EAAEZ,cAAc;MACpBwB,IAAI,EAAEvB;;GAEP;AACF;AAEAwB,OAAA,CAAAzC,OAAA,GAAeF,UAAU;AAEzB4C,MAAM,CAACD,OAAO,GAAG3C,UAAU;AAC3B4C,MAAM,CAACD,OAAO,CAACzC,OAAO,GAAGF,UAAU,EAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}